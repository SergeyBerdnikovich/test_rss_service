// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/services/rss/itemsfetcher/items_fetcher.go

// Package itemsfetcher is a generated GoMock package.
package itemsfetcher

import (
	context "context"
	entities "github.com/SergeyBerdnikovich/test_rss_service/pkg/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockItemsFetcher is a mock of ItemsFetcher interface
type MockItemsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockItemsFetcherMockRecorder
}

// MockItemsFetcherMockRecorder is the mock recorder for MockItemsFetcher
type MockItemsFetcherMockRecorder struct {
	mock *MockItemsFetcher
}

// NewMockItemsFetcher creates a new mock instance
func NewMockItemsFetcher(ctrl *gomock.Controller) *MockItemsFetcher {
	mock := &MockItemsFetcher{ctrl: ctrl}
	mock.recorder = &MockItemsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItemsFetcher) EXPECT() *MockItemsFetcherMockRecorder {
	return m.recorder
}

// FetchItems mocks base method
func (m *MockItemsFetcher) FetchItems(ctx context.Context, urls []string) ([]entities.RssItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchItems", ctx, urls)
	ret0, _ := ret[0].([]entities.RssItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchItems indicates an expected call of FetchItems
func (mr *MockItemsFetcherMockRecorder) FetchItems(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchItems", reflect.TypeOf((*MockItemsFetcher)(nil).FetchItems), ctx, urls)
}
